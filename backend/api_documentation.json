{
  "title": "Juridence Legal Database API",
  "version": "1.0.0",
  "description": "Comprehensive API for the Juridence Legal Database System",
  "base_url": "https://api.juridence.com",
  "authentication": {
    "type": "Bearer Token",
    "description": "Include your API key in the Authorization header",
    "example": "Authorization: Bearer your-api-key-here"
  },
  "rate_limits": {
    "free": "100 requests/hour",
    "professional": "1,000 requests/hour",
    "enterprise": "10,000 requests/hour"
  },
  "endpoints": {
    "general": [
      {
        "path": "/openapi.json",
        "methods": [
          "GET",
          "HEAD"
        ],
        "name": "openapi",
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "req",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/docs",
        "methods": [
          "GET",
          "HEAD"
        ],
        "name": "swagger_ui_html",
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "req",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/docs/oauth2-redirect",
        "methods": [
          "GET",
          "HEAD"
        ],
        "name": "swagger_ui_redirect",
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "req",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/redoc",
        "methods": [
          "GET",
          "HEAD"
        ],
        "name": "redoc_html",
        "summary": "",
        "description": "",
        "parameters": [
          {
            "name": "req",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/",
        "methods": [
          "GET"
        ],
        "name": "root",
        "summary": "",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/health",
        "methods": [
          "GET"
        ],
        "name": "health_check",
        "summary": "",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "authentication": [
      {
        "path": "/auth/register",
        "methods": [
          "POST"
        ],
        "name": "register",
        "summary": "Register a new user.",
        "description": "",
        "parameters": [
          {
            "name": "user_data",
            "type": "<class 'schemas.user.UserCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/login",
        "methods": [
          "POST"
        ],
        "name": "login",
        "summary": "Login user with email and password.",
        "description": "",
        "parameters": [
          {
            "name": "login_data",
            "type": "<class 'schemas.user.UserLogin'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/google",
        "methods": [
          "POST"
        ],
        "name": "google_auth",
        "summary": "Login/Register with Google OAuth.",
        "description": "",
        "parameters": [
          {
            "name": "google_data",
            "type": "<class 'schemas.user.GoogleAuth'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/forgot-password",
        "methods": [
          "POST"
        ],
        "name": "forgot_password",
        "summary": "Request password reset.",
        "description": "",
        "parameters": [
          {
            "name": "request",
            "type": "<class 'schemas.user.PasswordResetRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/reset-password",
        "methods": [
          "POST"
        ],
        "name": "reset_password",
        "summary": "Reset password with token.",
        "description": "",
        "parameters": [
          {
            "name": "reset_data",
            "type": "<class 'schemas.user.PasswordReset'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/change-password",
        "methods": [
          "POST"
        ],
        "name": "change_password",
        "summary": "Change user password.",
        "description": "",
        "parameters": [
          {
            "name": "password_data",
            "type": "<class 'schemas.user.PasswordChange'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/me",
        "methods": [
          "GET"
        ],
        "name": "get_current_user_info",
        "summary": "Get current user information.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/verify-email",
        "methods": [
          "POST"
        ],
        "name": "verify_email",
        "summary": "Verify user email with token.",
        "description": "",
        "parameters": [
          {
            "name": "token",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/auth/logout",
        "methods": [
          "POST"
        ],
        "name": "logout",
        "summary": "Logout user (client should discard token).",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "profile": [
      {
        "path": "/api/profile/me",
        "methods": [
          "GET"
        ],
        "name": "get_my_profile",
        "summary": "Get current user's profile information.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/me",
        "methods": [
          "GET"
        ],
        "name": "get_my_profile",
        "summary": "Get current user's profile information.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/me",
        "methods": [
          "PUT"
        ],
        "name": "update_my_profile",
        "summary": "Update current user's profile information.",
        "description": "",
        "parameters": [
          {
            "name": "profile_data",
            "type": "<class 'schemas.user.UserUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/me",
        "methods": [
          "PUT"
        ],
        "name": "update_my_profile",
        "summary": "Update current user's profile information.",
        "description": "",
        "parameters": [
          {
            "name": "profile_data",
            "type": "<class 'schemas.user.UserUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/change-password",
        "methods": [
          "POST"
        ],
        "name": "change_password",
        "summary": "Change user password.",
        "description": "",
        "parameters": [
          {
            "name": "password_data",
            "type": "<class 'schemas.user.PasswordChange'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/change-password",
        "methods": [
          "POST"
        ],
        "name": "change_password",
        "summary": "Change user password.",
        "description": "",
        "parameters": [
          {
            "name": "password_data",
            "type": "<class 'schemas.user.PasswordChange'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/upload-avatar",
        "methods": [
          "POST"
        ],
        "name": "upload_avatar",
        "summary": "Upload profile picture.",
        "description": "",
        "parameters": [
          {
            "name": "file",
            "type": "<class 'fastapi.datastructures.UploadFile'>",
            "required": false,
            "default": "annotation=UploadFile required=True alias='file' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/upload-avatar",
        "methods": [
          "POST"
        ],
        "name": "upload_avatar",
        "summary": "Upload profile picture.",
        "description": "",
        "parameters": [
          {
            "name": "file",
            "type": "<class 'fastapi.datastructures.UploadFile'>",
            "required": false,
            "default": "annotation=UploadFile required=True alias='file' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/avatar",
        "methods": [
          "DELETE"
        ],
        "name": "delete_avatar",
        "summary": "Delete profile picture.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/avatar",
        "methods": [
          "DELETE"
        ],
        "name": "delete_avatar",
        "summary": "Delete profile picture.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/activity",
        "methods": [
          "GET"
        ],
        "name": "get_user_activity",
        "summary": "Get user activity summary.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/activity",
        "methods": [
          "GET"
        ],
        "name": "get_user_activity",
        "summary": "Get user activity summary.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/deactivate",
        "methods": [
          "POST"
        ],
        "name": "deactivate_account",
        "summary": "Deactivate user account.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/deactivate",
        "methods": [
          "POST"
        ],
        "name": "deactivate_account",
        "summary": "Deactivate user account.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users",
        "methods": [
          "GET"
        ],
        "name": "get_all_users",
        "summary": "Get all users (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": 0
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": 100
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users",
        "methods": [
          "GET"
        ],
        "name": "get_all_users",
        "summary": "Get all users (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": 0
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": 100
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "GET"
        ],
        "name": "get_user_by_id",
        "summary": "Get user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "GET"
        ],
        "name": "get_user_by_id",
        "summary": "Get user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user_by_id",
        "summary": "Update user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "profile_data",
            "type": "<class 'schemas.user.UserUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user_by_id",
        "summary": "Update user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "profile_data",
            "type": "<class 'schemas.user.UserUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_user_by_id",
        "summary": "Delete user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_user_by_id",
        "summary": "Delete user by ID (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}/toggle-status",
        "methods": [
          "POST"
        ],
        "name": "toggle_user_status",
        "summary": "Toggle user active/inactive status (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/profile/users/{user_id}/toggle-status",
        "methods": [
          "POST"
        ],
        "name": "toggle_user_status",
        "summary": "Toggle user active/inactive status (admin only).",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "people": [
      {
        "path": "/api/people/search",
        "methods": [
          "GET"
        ],
        "name": "search_people",
        "summary": "Search for people with various filters",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='General search query' json_schema_extra={}"
          },
          {
            "name": "first_name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='first_name' description='First name filter' json_schema_extra={}"
          },
          {
            "name": "last_name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='last_name' description='Last name filter' json_schema_extra={}"
          },
          {
            "name": "id_number",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='id_number' description='ID number filter' json_schema_extra={}"
          },
          {
            "name": "phone_number",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='phone_number' description='Phone number filter' json_schema_extra={}"
          },
          {
            "name": "email",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='email' description='Email filter' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='City filter' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Region filter' json_schema_extra={}"
          },
          {
            "name": "risk_level",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='risk_level' description='Risk level filter' json_schema_extra={}"
          },
          {
            "name": "occupation",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='occupation' description='Occupation filter' json_schema_extra={}"
          },
          {
            "name": "employer",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='employer' description='Employer filter' json_schema_extra={}"
          },
          {
            "name": "organization",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='organization' description='Organization filter' json_schema_extra={}"
          },
          {
            "name": "gender",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='gender' description='Gender filter' json_schema_extra={}"
          },
          {
            "name": "nationality",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='nationality' description='Nationality filter' json_schema_extra={}"
          },
          {
            "name": "is_verified",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_verified' description='Verification status filter' json_schema_extra={}"
          },
          {
            "name": "person_status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='person_status' description='Status filter' json_schema_extra={}"
          },
          {
            "name": "min_risk_score",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='min_risk_score' description='Minimum risk score' json_schema_extra={} metadata=[Ge(ge=0), Le(le=200)]"
          },
          {
            "name": "max_risk_score",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='max_risk_score' description='Maximum risk score' json_schema_extra={} metadata=[Ge(ge=0), Le(le=200)]"
          },
          {
            "name": "min_case_count",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='min_case_count' description='Minimum case count' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "max_case_count",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='max_case_count' description='Maximum case count' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "sort_by",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='full_name' alias='sort_by' description='Sort field' json_schema_extra={}"
          },
          {
            "name": "sort_order",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='asc' alias='sort_order' description='Sort order' json_schema_extra={} metadata=[_PydanticGeneralMetadata(pattern='^(asc|desc)$')]"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/people/{people_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person",
        "summary": "Get a specific person by ID",
        "description": "",
        "parameters": [
          {
            "name": "people_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/people/",
        "methods": [
          "POST"
        ],
        "name": "create_person",
        "summary": "Create a new person record",
        "description": "",
        "parameters": [
          {
            "name": "person_data",
            "type": "<class 'schemas.people.PeopleCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/people/{people_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person",
        "summary": "Update a person record",
        "description": "",
        "parameters": [
          {
            "name": "people_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "person_data",
            "type": "<class 'schemas.people.PeopleUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/people/{people_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person",
        "summary": "Delete a person record (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "people_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/people/stats/overview",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get people statistics overview",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "banks": [
      {
        "path": "/api/banks/search",
        "methods": [
          "GET"
        ],
        "name": "search_banks",
        "summary": "Search banks with various filters",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='General search query' json_schema_extra={}"
          },
          {
            "name": "name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='name' description='Bank name filter' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='City filter' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Region filter' json_schema_extra={}"
          },
          {
            "name": "bank_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='bank_type' description='Bank type filter' json_schema_extra={}"
          },
          {
            "name": "ownership_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='ownership_type' description='Ownership type filter' json_schema_extra={}"
          },
          {
            "name": "has_mobile_app",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_mobile_app' description='Has mobile app filter' json_schema_extra={}"
          },
          {
            "name": "has_online_banking",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_online_banking' description='Has online banking filter' json_schema_extra={}"
          },
          {
            "name": "has_atm_services",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_atm_services' description='Has ATM services filter' json_schema_extra={}"
          },
          {
            "name": "has_foreign_exchange",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_foreign_exchange' description='Has foreign exchange filter' json_schema_extra={}"
          },
          {
            "name": "rating",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='rating' description='Rating filter' json_schema_extra={}"
          },
          {
            "name": "min_assets",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='min_assets' description='Minimum assets filter' json_schema_extra={}"
          },
          {
            "name": "max_assets",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='max_assets' description='Maximum assets filter' json_schema_extra={}"
          },
          {
            "name": "sort_by",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='name' alias='sort_by' description='Sort by field' json_schema_extra={}"
          },
          {
            "name": "sort_order",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='asc' alias='sort_order' description='Sort order (asc/desc)' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/",
        "methods": [
          "GET"
        ],
        "name": "get_banks",
        "summary": "Get all banks",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}",
        "methods": [
          "GET"
        ],
        "name": "get_bank",
        "summary": "Get a specific bank by ID",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/",
        "methods": [
          "POST"
        ],
        "name": "create_bank",
        "summary": "Create a new bank",
        "description": "",
        "parameters": [
          {
            "name": "bank",
            "type": "<class 'schemas.banks.BanksCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_bank",
        "summary": "Update a bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "bank",
            "type": "<class 'schemas.banks.BanksUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_bank",
        "summary": "Delete a bank (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/stats/overview",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get banks statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}/analytics",
        "methods": [
          "GET"
        ],
        "name": "get_bank_analytics",
        "summary": "Get analytics for a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}/case-statistics",
        "methods": [
          "GET"
        ],
        "name": "get_bank_case_statistics",
        "summary": "Get case statistics for a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}/generate-analytics",
        "methods": [
          "POST"
        ],
        "name": "generate_bank_analytics",
        "summary": "Generate analytics and statistics for a bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banks/{bank_id}/related-cases",
        "methods": [
          "GET"
        ],
        "name": "get_bank_related_cases",
        "summary": "Get cases related to a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum related cases' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "insurance": [
      {
        "path": "/api/insurance/search",
        "methods": [
          "GET"
        ],
        "name": "search_insurance",
        "summary": "Search insurance companies with various filters",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='General search query' json_schema_extra={}"
          },
          {
            "name": "name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='name' description='Insurance name filter' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='City filter' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Region filter' json_schema_extra={}"
          },
          {
            "name": "insurance_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='insurance_type' description='Insurance type filter' json_schema_extra={}"
          },
          {
            "name": "ownership_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='ownership_type' description='Ownership type filter' json_schema_extra={}"
          },
          {
            "name": "has_mobile_app",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_mobile_app' description='Has mobile app filter' json_schema_extra={}"
          },
          {
            "name": "has_online_portal",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_online_portal' description='Has online portal filter' json_schema_extra={}"
          },
          {
            "name": "has_online_claims",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_online_claims' description='Has online claims filter' json_schema_extra={}"
          },
          {
            "name": "has_24_7_support",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='has_24_7_support' description='Has 24/7 support filter' json_schema_extra={}"
          },
          {
            "name": "rating",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='rating' description='Rating filter' json_schema_extra={}"
          },
          {
            "name": "target_market",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='target_market' description='Target market filter' json_schema_extra={}"
          },
          {
            "name": "min_assets",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='min_assets' description='Minimum assets filter' json_schema_extra={}"
          },
          {
            "name": "max_assets",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='max_assets' description='Maximum assets filter' json_schema_extra={}"
          },
          {
            "name": "sort_by",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='name' alias='sort_by' description='Sort by field' json_schema_extra={}"
          },
          {
            "name": "sort_order",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='asc' alias='sort_order' description='Sort order (asc/desc)' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/",
        "methods": [
          "GET"
        ],
        "name": "get_insurance",
        "summary": "Get all insurance companies",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_company",
        "summary": "Get a specific insurance company by ID",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/",
        "methods": [
          "POST"
        ],
        "name": "create_insurance",
        "summary": "Create a new insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance",
            "type": "<class 'schemas.insurance.InsuranceCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_insurance",
        "summary": "Update an insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "insurance",
            "type": "<class 'schemas.insurance.InsuranceUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_insurance",
        "summary": "Delete an insurance company (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/stats/overview",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get insurance statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}/analytics",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_analytics",
        "summary": "Get analytics for a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}/case-statistics",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_case_statistics",
        "summary": "Get case statistics for a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/insurance/{insurance_id}/related-cases",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_related_cases",
        "summary": "Get related cases for a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum related cases' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "companies": [
      {
        "path": "/api/companies/",
        "methods": [
          "GET"
        ],
        "name": "get_companies",
        "summary": "Get all companies with pagination",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": 0
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": 100
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/search",
        "methods": [
          "GET"
        ],
        "name": "search_companies",
        "summary": "Search companies with filters and pagination",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='Search term for company name, industry, or activities' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='Filter by city' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "company_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='company_type' description='Filter by company type' json_schema_extra={}"
          },
          {
            "name": "industry",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='industry' description='Filter by industry' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=True alias='is_active' description='Filter by active status' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}",
        "methods": [
          "GET"
        ],
        "name": "get_company",
        "summary": "Get a specific company by ID",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/",
        "methods": [
          "POST"
        ],
        "name": "create_company",
        "summary": "Create a new company",
        "description": "",
        "parameters": [
          {
            "name": "company",
            "type": "<class 'schemas.companies.CompaniesCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_company",
        "summary": "Update a company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "company",
            "type": "<class 'schemas.companies.CompaniesUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_company",
        "summary": "Delete a company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/stats/overview",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get companies statistics overview",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}/analytics",
        "methods": [
          "GET"
        ],
        "name": "get_company_analytics",
        "summary": "Get analytics for a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}/case-statistics",
        "methods": [
          "GET"
        ],
        "name": "get_company_case_statistics",
        "summary": "Get case statistics for a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/companies/{company_id}/related-cases",
        "methods": [
          "GET"
        ],
        "name": "get_company_related_cases",
        "summary": "Get related cases for a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum related cases' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "search": [
      {
        "path": "/api/search/unified",
        "methods": [
          "GET"
        ],
        "name": "unified_search",
        "summary": "Unified search across people, banks, and insurance",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='General search query' json_schema_extra={}"
          },
          {
            "name": "search_type",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='all' alias='search_type' description='Type of search (all, people, banks, insurance, companies)' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1000 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=5000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/search/quick",
        "methods": [
          "GET"
        ],
        "name": "quick_search",
        "summary": "Quick search for suggestions and autocomplete",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=True alias='query' description='Search query' json_schema_extra={} metadata=[MinLen(min_length=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum results' json_schema_extra={} metadata=[Ge(ge=1), Le(le=50)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/search/advanced",
        "methods": [
          "POST"
        ],
        "name": "advanced_search",
        "summary": "Advanced search with detailed filters",
        "description": "",
        "parameters": [
          {
            "name": "request",
            "type": "<class 'schemas.search.AdvancedSearchRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/search/stats",
        "methods": [
          "GET"
        ],
        "name": "get_search_stats",
        "summary": "Get search statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "reported_cases": [
      {
        "path": "/api/cases/search",
        "methods": [
          "GET"
        ],
        "name": "search_cases",
        "summary": "Search reported cases with filters and pagination",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='Search query for title, antagonist, protagonist, or citation' json_schema_extra={}"
          },
          {
            "name": "year",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='year' description='Filter by year' json_schema_extra={}"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' description='Filter by court type (SC, CA, HC)' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "area_of_law",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='area_of_law' description='Filter by area of law' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of results per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "sort_by",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='date' alias='sort_by' description='Sort by field' json_schema_extra={}"
          },
          {
            "name": "sort_order",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='desc' alias='sort_order' description='Sort order' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/cases/{case_id}",
        "methods": [
          "GET"
        ],
        "name": "get_case_detail",
        "summary": "Get detailed information about a specific case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/cases/",
        "methods": [
          "GET"
        ],
        "name": "get_recent_cases",
        "summary": "Get recent cases with pagination",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of results per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/cases/stats/overview",
        "methods": [
          "GET"
        ],
        "name": "get_case_stats",
        "summary": "Get overview statistics of reported cases",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "legal_history": [
      {
        "path": "/api/legal-history/search/{entity_type}/{entity_id}",
        "methods": [
          "GET"
        ],
        "name": "get_entity_legal_history",
        "summary": "Get legal history for a specific entity (person, bank, or insurance)",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/legal-history/cases/{entity_type}/{entity_id}",
        "methods": [
          "GET"
        ],
        "name": "get_entity_cases",
        "summary": "Get paginated list of cases for an entity",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of results per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "mention_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='mention_type' description='Filter by mention type' json_schema_extra={}"
          },
          {
            "name": "min_relevance_score",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='min_relevance_score' description='Minimum relevance score' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/legal-history/mentions/{entity_type}/{entity_id}",
        "methods": [
          "GET"
        ],
        "name": "get_entity_mentions",
        "summary": "Get detailed mention information for an entity",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/legal-history/rebuild-index/{entity_type}/{entity_id}",
        "methods": [
          "POST"
        ],
        "name": "rebuild_legal_index",
        "summary": "Rebuild legal history index for an entity",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "case_search": [
      {
        "path": "/api/case-search/search",
        "methods": [
          "GET"
        ],
        "name": "search_cases",
        "summary": "Search cases by person name, title, or content",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=True alias='query' description='Search query' json_schema_extra={} metadata=[MinLen(min_length=2)]"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "case_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='case_type' description='Filter by case type' json_schema_extra={}"
          },
          {
            "name": "area_of_law",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='area_of_law' description='Filter by area of law' json_schema_extra={}"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' description='Filter by case status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/case-search/person/{person_name}",
        "methods": [
          "GET"
        ],
        "name": "get_person_cases",
        "summary": "Get all cases for a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_name",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/case-search/suggestions",
        "methods": [
          "GET"
        ],
        "name": "get_case_suggestions",
        "summary": "Get case search suggestions for autocomplete",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=True alias='query' description='Search query' json_schema_extra={} metadata=[MinLen(min_length=2)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum suggestions' json_schema_extra={} metadata=[Ge(ge=1), Le(le=50)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/case-search/{case_id}/details",
        "methods": [
          "GET"
        ],
        "name": "get_case_details",
        "summary": "Get detailed information about a specific case including all metadata",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/case-search/{case_id}/related-cases",
        "methods": [
          "GET"
        ],
        "name": "get_related_cases",
        "summary": "Get cases related to the people involved in the current case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Maximum related cases' json_schema_extra={} metadata=[Ge(ge=1), Le(le=50)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "enhanced_search": [
      {
        "path": "/api/enhanced-search/search",
        "methods": [
          "GET"
        ],
        "name": "enhanced_search",
        "summary": "Enhanced search across all entities with progress indication",
        "description": "",
        "parameters": [
          {
            "name": "q",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=True alias='q' description='Search query' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "risk_level",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='risk_level' description='Filter by risk level' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "case_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='case_type' description='Filter by case type' json_schema_extra={}"
          },
          {
            "name": "sort_by",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='relevance' alias='sort_by' description='Sort field' json_schema_extra={}"
          },
          {
            "name": "sort_order",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='desc' alias='sort_order' description='Sort order' json_schema_extra={} metadata=[_PydanticGeneralMetadata(pattern='^(asc|desc)$')]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "case_hearings": [
      {
        "path": "/api/cases/{case_id}/hearings",
        "methods": [
          "GET"
        ],
        "name": "get_case_hearings",
        "summary": "Get all hearings for a specific case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/cases/{case_id}/hearings",
        "methods": [
          "POST"
        ],
        "name": "create_case_hearing",
        "summary": "Create a new hearing for a case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "hearing",
            "type": "<class 'schemas.case_hearings.CaseHearingCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/hearings/{hearing_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_case_hearing",
        "summary": "Update a case hearing",
        "description": "",
        "parameters": [
          {
            "name": "hearing_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "hearing",
            "type": "<class 'schemas.case_hearings.CaseHearingUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/hearings/{hearing_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_case_hearing",
        "summary": "Delete a case hearing",
        "description": "",
        "parameters": [
          {
            "name": "hearing_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "person_case_statistics": [
      {
        "path": "/api/person-case-statistics/",
        "methods": [
          "GET"
        ],
        "name": "get_all_person_case_statistics",
        "summary": "Get all person case statistics with pagination.",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' description='Number of records to skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' description='Number of records to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person_case_statistics",
        "summary": "Get case statistics for a specific person.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/summary/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person_case_statistics_summary",
        "summary": "Get case statistics summary for a specific person.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/",
        "methods": [
          "POST"
        ],
        "name": "create_person_case_statistics",
        "summary": "Create new person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "stats_data",
            "type": "<class 'schemas.person_case_statistics.PersonCaseStatisticsCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person_case_statistics",
        "summary": "Update person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "stats_data",
            "type": "<class 'schemas.person_case_statistics.PersonCaseStatisticsUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person_case_statistics",
        "summary": "Delete person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/top-cases",
        "methods": [
          "GET"
        ],
        "name": "get_top_cases_people",
        "summary": "Get people with the most cases.",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Number of top people to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/high-risk",
        "methods": [
          "GET"
        ],
        "name": "get_high_risk_people",
        "summary": "Get people with high unresolved cases (potential high risk).",
        "description": "",
        "parameters": [
          {
            "name": "unresolved_threshold",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=5 alias='unresolved_threshold' description='Minimum unresolved cases to be considered high risk' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of people to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "person-case-statistics": [
      {
        "path": "/api/person-case-statistics/",
        "methods": [
          "GET"
        ],
        "name": "get_all_person_case_statistics",
        "summary": "Get all person case statistics with pagination.",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' description='Number of records to skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' description='Number of records to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person_case_statistics",
        "summary": "Get case statistics for a specific person.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/summary/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person_case_statistics_summary",
        "summary": "Get case statistics summary for a specific person.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/",
        "methods": [
          "POST"
        ],
        "name": "create_person_case_statistics",
        "summary": "Create new person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "stats_data",
            "type": "<class 'schemas.person_case_statistics.PersonCaseStatisticsCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person_case_statistics",
        "summary": "Update person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "stats_data",
            "type": "<class 'schemas.person_case_statistics.PersonCaseStatisticsUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/person/{person_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person_case_statistics",
        "summary": "Delete person case statistics.",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/top-cases",
        "methods": [
          "GET"
        ],
        "name": "get_top_cases_people",
        "summary": "Get people with the most cases.",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' description='Number of top people to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person-case-statistics/high-risk",
        "methods": [
          "GET"
        ],
        "name": "get_high_risk_people",
        "summary": "Get people with high unresolved cases (potential high risk).",
        "description": "",
        "parameters": [
          {
            "name": "unresolved_threshold",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=5 alias='unresolved_threshold' description='Minimum unresolved cases to be considered high risk' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of people to return' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "person_analytics": [
      {
        "path": "/api/person/{person_id}/analytics",
        "methods": [
          "GET"
        ],
        "name": "get_person_analytics",
        "summary": "Get analytics for a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/person/{person_id}/analytics/generate",
        "methods": [
          "POST"
        ],
        "name": "generate_person_analytics",
        "summary": "Generate or regenerate analytics for a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/analytics/risk-level/{risk_level}",
        "methods": [
          "GET"
        ],
        "name": "get_analytics_by_risk_level",
        "summary": "Get all persons with a specific risk level",
        "description": "",
        "parameters": [
          {
            "name": "risk_level",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/analytics/financial-risk/{risk_level}",
        "methods": [
          "GET"
        ],
        "name": "get_analytics_by_financial_risk",
        "summary": "Get all persons with a specific financial risk level",
        "description": "",
        "parameters": [
          {
            "name": "risk_level",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/analytics/high-risk",
        "methods": [
          "GET"
        ],
        "name": "get_high_risk_persons",
        "summary": "Get all high-risk persons (High or Critical risk level)",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/analytics/stats",
        "methods": [
          "GET"
        ],
        "name": "get_analytics_stats",
        "summary": "Get overall analytics statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "banking_summary": [
      {
        "path": "/api/banking-summary/generate/{case_id}",
        "methods": [
          "POST"
        ],
        "name": "generate_banking_summary",
        "summary": "Generate and save AI-powered banking summary for a case.",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/{case_id}",
        "methods": [
          "GET"
        ],
        "name": "get_banking_summary",
        "summary": "Get existing banking summary for a case.",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/generate-batch",
        "methods": [
          "POST"
        ],
        "name": "generate_banking_summaries_batch",
        "summary": "Generate banking summaries for multiple cases.",
        "description": "",
        "parameters": [
          {
            "name": "case_ids",
            "type": "list[int]",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/stats/summary",
        "methods": [
          "GET"
        ],
        "name": "get_summary_stats",
        "summary": "Get statistics about generated banking summaries.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "banking-summary": [
      {
        "path": "/api/banking-summary/generate/{case_id}",
        "methods": [
          "POST"
        ],
        "name": "generate_banking_summary",
        "summary": "Generate and save AI-powered banking summary for a case.",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/{case_id}",
        "methods": [
          "GET"
        ],
        "name": "get_banking_summary",
        "summary": "Get existing banking summary for a case.",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/generate-batch",
        "methods": [
          "POST"
        ],
        "name": "generate_banking_summaries_batch",
        "summary": "Generate banking summaries for multiple cases.",
        "description": "",
        "parameters": [
          {
            "name": "case_ids",
            "type": "list[int]",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/banking-summary/stats/summary",
        "methods": [
          "GET"
        ],
        "name": "get_summary_stats",
        "summary": "Get statistics about generated banking summaries.",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "request_details": [
      {
        "path": "/api/request-details/submit",
        "methods": [
          "POST"
        ],
        "name": "submit_request",
        "summary": "Submit a new request for details or information",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.RequestDetailsCreate'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/submit-case-request",
        "methods": [
          "POST"
        ],
        "name": "submit_case_request",
        "summary": "Submit a quick case request",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.QuickCaseRequest'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/submit-profile-request",
        "methods": [
          "POST"
        ],
        "name": "submit_profile_request",
        "summary": "Submit a quick profile request",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.QuickProfileRequest'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/",
        "methods": [
          "GET"
        ],
        "name": "get_requests",
        "summary": "Get all requests with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[models.request_details.RequestStatus]",
            "required": false,
            "default": null
          },
          {
            "name": "entity_type",
            "type": "typing.Optional[models.request_details.EntityType]",
            "required": false,
            "default": null
          },
          {
            "name": "request_type",
            "type": "typing.Optional[models.request_details.RequestType]",
            "required": false,
            "default": null
          },
          {
            "name": "priority",
            "type": "typing.Optional[models.request_details.Priority]",
            "required": false,
            "default": null
          },
          {
            "name": "is_urgent",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": null
          },
          {
            "name": "assigned_to",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/stats",
        "methods": [
          "GET"
        ],
        "name": "get_request_stats",
        "summary": "Get request statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "GET"
        ],
        "name": "get_request",
        "summary": "Get a specific request by ID",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_request",
        "summary": "Update a request (admin/staff only)",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.RequestDetailsUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_request",
        "summary": "Delete a request (admin only)",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/entity/{entity_type}/{entity_id}",
        "methods": [
          "GET"
        ],
        "name": "get_requests_by_entity",
        "summary": "Get all requests for a specific entity",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<enum 'EntityType'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/recent/{days}",
        "methods": [
          "GET"
        ],
        "name": "get_recent_requests",
        "summary": "Get recent requests from the last N days",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=True alias='days' json_schema_extra={} metadata=[Ge(ge=1), Le(le=30)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "request-details": [
      {
        "path": "/api/request-details/submit",
        "methods": [
          "POST"
        ],
        "name": "submit_request",
        "summary": "Submit a new request for details or information",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.RequestDetailsCreate'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/submit-case-request",
        "methods": [
          "POST"
        ],
        "name": "submit_case_request",
        "summary": "Submit a quick case request",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.QuickCaseRequest'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/submit-profile-request",
        "methods": [
          "POST"
        ],
        "name": "submit_profile_request",
        "summary": "Submit a quick profile request",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.QuickProfileRequest'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/",
        "methods": [
          "GET"
        ],
        "name": "get_requests",
        "summary": "Get all requests with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "skip",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='skip' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[models.request_details.RequestStatus]",
            "required": false,
            "default": null
          },
          {
            "name": "entity_type",
            "type": "typing.Optional[models.request_details.EntityType]",
            "required": false,
            "default": null
          },
          {
            "name": "request_type",
            "type": "typing.Optional[models.request_details.RequestType]",
            "required": false,
            "default": null
          },
          {
            "name": "priority",
            "type": "typing.Optional[models.request_details.Priority]",
            "required": false,
            "default": null
          },
          {
            "name": "is_urgent",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": null
          },
          {
            "name": "assigned_to",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/stats",
        "methods": [
          "GET"
        ],
        "name": "get_request_stats",
        "summary": "Get request statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "GET"
        ],
        "name": "get_request",
        "summary": "Get a specific request by ID",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_request",
        "summary": "Update a request (admin/staff only)",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "request_data",
            "type": "<class 'schemas.request_details.RequestDetailsUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/{request_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_request",
        "summary": "Delete a request (admin only)",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/entity/{entity_type}/{entity_id}",
        "methods": [
          "GET"
        ],
        "name": "get_requests_by_entity",
        "summary": "Get all requests for a specific entity",
        "description": "",
        "parameters": [
          {
            "name": "entity_type",
            "type": "<enum 'EntityType'>",
            "required": true,
            "default": null
          },
          {
            "name": "entity_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/request-details/recent/{days}",
        "methods": [
          "GET"
        ],
        "name": "get_recent_requests",
        "summary": "Get recent requests from the last N days",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=True alias='days' json_schema_extra={} metadata=[Ge(ge=1), Le(le=30)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "subscription": [
      {
        "path": "/api/subscription/plans",
        "methods": [
          "GET"
        ],
        "name": "get_subscription_plans",
        "summary": "Get available subscription plans",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/subscription/current",
        "methods": [
          "GET"
        ],
        "name": "get_current_subscription",
        "summary": "Get current user's subscription with usage data",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/subscription/upgrade",
        "methods": [
          "POST"
        ],
        "name": "upgrade_subscription",
        "summary": "Upgrade user's subscription plan",
        "description": "",
        "parameters": [
          {
            "name": "plan",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/subscription/cancel",
        "methods": [
          "POST"
        ],
        "name": "cancel_subscription",
        "summary": "Cancel user's subscription",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/subscription/usage",
        "methods": [
          "GET"
        ],
        "name": "get_usage_history",
        "summary": "Get user's usage history",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=50 alias='limit' json_schema_extra={} metadata=[Le(le=100)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/subscription/usage",
        "methods": [
          "POST"
        ],
        "name": "record_usage",
        "summary": "Record usage for a specific resource",
        "description": "",
        "parameters": [
          {
            "name": "resource_type",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "count",
            "type": "<class 'int'>",
            "required": false,
            "default": 1
          },
          {
            "name": "metadata",
            "type": "typing.Optional[dict]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "notifications": [
      {
        "path": "/api/notifications/",
        "methods": [
          "GET"
        ],
        "name": "get_notifications",
        "summary": "Get paginated list of notifications",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          },
          {
            "name": "type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='type' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/stats",
        "methods": [
          "GET"
        ],
        "name": "get_notification_stats",
        "summary": "Get notification statistics",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/",
        "methods": [
          "POST"
        ],
        "name": "create_notification",
        "summary": "Create a new notification",
        "description": "",
        "parameters": [
          {
            "name": "notification_data",
            "type": "<class 'schemas.notification.NotificationCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/{notification_id}",
        "methods": [
          "GET"
        ],
        "name": "get_notification",
        "summary": "Get a specific notification by ID",
        "description": "",
        "parameters": [
          {
            "name": "notification_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/{notification_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_notification",
        "summary": "Update a notification",
        "description": "",
        "parameters": [
          {
            "name": "notification_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "notification_data",
            "type": "<class 'schemas.notification.NotificationUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/{notification_id}/read",
        "methods": [
          "PUT"
        ],
        "name": "mark_as_read",
        "summary": "Mark a notification as read",
        "description": "",
        "parameters": [
          {
            "name": "notification_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/{notification_id}/unread",
        "methods": [
          "PUT"
        ],
        "name": "mark_as_unread",
        "summary": "Mark a notification as unread",
        "description": "",
        "parameters": [
          {
            "name": "notification_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/mark-all-read",
        "methods": [
          "PUT"
        ],
        "name": "mark_all_as_read",
        "summary": "Mark all notifications as read for a user",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/{notification_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_notification",
        "summary": "Delete a notification",
        "description": "",
        "parameters": [
          {
            "name": "notification_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/notifications/bulk",
        "methods": [
          "DELETE"
        ],
        "name": "delete_notifications_bulk",
        "summary": "Delete multiple notifications",
        "description": "",
        "parameters": [
          {
            "name": "notification_ids",
            "type": "typing.List[int]",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "security": [
      {
        "path": "/api/security/events",
        "methods": [
          "GET"
        ],
        "name": "get_security_events",
        "summary": "Get user's security events",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=50 alias='limit' json_schema_extra={} metadata=[Le(le=100)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/change-password",
        "methods": [
          "POST"
        ],
        "name": "change_password",
        "summary": "Change user's password",
        "description": "",
        "parameters": [
          {
            "name": "password_data",
            "type": "<class 'schemas.security.PasswordChangeRequest'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/2fa",
        "methods": [
          "GET"
        ],
        "name": "get_two_factor_auth",
        "summary": "Get user's 2FA status",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/2fa/setup",
        "methods": [
          "POST"
        ],
        "name": "setup_two_factor_auth",
        "summary": "Setup two-factor authentication",
        "description": "",
        "parameters": [
          {
            "name": "setup_data",
            "type": "<class 'schemas.security.TwoFactorAuthSetup'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/2fa/verify",
        "methods": [
          "POST"
        ],
        "name": "verify_two_factor_auth",
        "summary": "Verify two-factor authentication setup",
        "description": "",
        "parameters": [
          {
            "name": "verify_data",
            "type": "<class 'schemas.security.TwoFactorAuthVerify'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/2fa/disable",
        "methods": [
          "POST"
        ],
        "name": "disable_two_factor_auth",
        "summary": "Disable two-factor authentication",
        "description": "",
        "parameters": [
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/api-keys",
        "methods": [
          "GET"
        ],
        "name": "get_api_keys",
        "summary": "Get user's API keys",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/api-keys",
        "methods": [
          "POST"
        ],
        "name": "create_api_key",
        "summary": "Create a new API key",
        "description": "",
        "parameters": [
          {
            "name": "key_data",
            "type": "<class 'schemas.security.ApiKeyCreate'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/api-keys/{key_id}",
        "methods": [
          "DELETE"
        ],
        "name": "revoke_api_key",
        "summary": "Revoke an API key",
        "description": "",
        "parameters": [
          {
            "name": "key_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "request",
            "type": "<class 'starlette.requests.Request'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/sessions",
        "methods": [
          "GET"
        ],
        "name": "get_login_sessions",
        "summary": "Get user's active login sessions",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/sessions/{session_id}",
        "methods": [
          "DELETE"
        ],
        "name": "terminate_session",
        "summary": "Terminate a specific login session",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/security/settings",
        "methods": [
          "GET"
        ],
        "name": "get_security_settings",
        "summary": "Get comprehensive security settings",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin": [
      {
        "path": "/api/admin/stats",
        "methods": [
          "GET"
        ],
        "name": "get_dashboard_stats",
        "summary": "Get overall dashboard statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/stats",
        "methods": [
          "GET"
        ],
        "name": "get_dashboard_stats",
        "summary": "Get overall dashboard statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users",
        "methods": [
          "GET"
        ],
        "name": "get_users",
        "summary": "Get paginated list of users with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "role",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users",
        "methods": [
          "GET"
        ],
        "name": "get_users",
        "summary": "Get paginated list of users with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "role",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/stats",
        "methods": [
          "GET"
        ],
        "name": "get_users_stats",
        "summary": "Get user statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/stats",
        "methods": [
          "GET"
        ],
        "name": "get_users_stats",
        "summary": "Get user statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "GET"
        ],
        "name": "get_user",
        "summary": "Get detailed user information",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "GET"
        ],
        "name": "get_user",
        "summary": "Get detailed user information",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users",
        "methods": [
          "POST"
        ],
        "name": "create_user",
        "summary": "Create a new user",
        "description": "",
        "parameters": [
          {
            "name": "user_data",
            "type": "<class 'schemas.admin.UserCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users",
        "methods": [
          "POST"
        ],
        "name": "create_user",
        "summary": "Create a new user",
        "description": "",
        "parameters": [
          {
            "name": "user_data",
            "type": "<class 'schemas.admin.UserCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user",
        "summary": "Update user information",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "user_data",
            "type": "<class 'schemas.admin.UserUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user",
        "summary": "Update user information",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "user_data",
            "type": "<class 'schemas.admin.UserUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_user",
        "summary": "Delete a user",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_user",
        "summary": "Delete a user",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}/reset-password",
        "methods": [
          "POST"
        ],
        "name": "reset_user_password",
        "summary": "Reset a user's password (admin only)",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "password_data",
            "type": "<class 'schemas.user.AdminPasswordReset'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/users/{user_id}/reset-password",
        "methods": [
          "POST"
        ],
        "name": "reset_user_password",
        "summary": "Reset a user's password (admin only)",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "password_data",
            "type": "<class 'schemas.user.AdminPasswordReset'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys",
        "methods": [
          "GET"
        ],
        "name": "get_api_keys",
        "summary": "Get API keys with optional user filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys",
        "methods": [
          "GET"
        ],
        "name": "get_api_keys",
        "summary": "Get API keys with optional user filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys",
        "methods": [
          "POST"
        ],
        "name": "create_api_key",
        "summary": "Create a new API key for a user",
        "description": "",
        "parameters": [
          {
            "name": "api_key_data",
            "type": "<class 'schemas.admin.ApiKeyCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys",
        "methods": [
          "POST"
        ],
        "name": "create_api_key",
        "summary": "Create a new API key for a user",
        "description": "",
        "parameters": [
          {
            "name": "api_key_data",
            "type": "<class 'schemas.admin.ApiKeyCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys/{key_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_api_key",
        "summary": "Delete an API key",
        "description": "",
        "parameters": [
          {
            "name": "key_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/api-keys/{key_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_api_key",
        "summary": "Delete an API key",
        "description": "",
        "parameters": [
          {
            "name": "key_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases",
        "methods": [
          "GET"
        ],
        "name": "get_cases",
        "summary": "Get paginated list of cases with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases",
        "methods": [
          "GET"
        ],
        "name": "get_cases",
        "summary": "Get paginated list of cases with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/stats",
        "methods": [
          "GET"
        ],
        "name": "get_case_stats",
        "summary": "Get comprehensive case statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/stats",
        "methods": [
          "GET"
        ],
        "name": "get_case_stats",
        "summary": "Get comprehensive case statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "GET"
        ],
        "name": "get_case",
        "summary": "Get a specific case by ID",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "GET"
        ],
        "name": "get_case",
        "summary": "Get a specific case by ID",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases",
        "methods": [
          "POST"
        ],
        "name": "create_case",
        "summary": "Create a new case",
        "description": "",
        "parameters": [
          {
            "name": "case_data",
            "type": "<class 'schemas.admin.CaseCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases",
        "methods": [
          "POST"
        ],
        "name": "create_case",
        "summary": "Create a new case",
        "description": "",
        "parameters": [
          {
            "name": "case_data",
            "type": "<class 'schemas.admin.CaseCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_case",
        "summary": "Update a case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "case_data",
            "type": "<class 'schemas.admin.CaseUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_case",
        "summary": "Update a case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "case_data",
            "type": "<class 'schemas.admin.CaseUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_case",
        "summary": "Delete a case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_case",
        "summary": "Delete a case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/upload",
        "methods": [
          "POST"
        ],
        "name": "upload_case",
        "summary": "Upload a case document and create a case record with AI analysis",
        "description": "",
        "parameters": [
          {
            "name": "file",
            "type": "<class 'fastapi.datastructures.UploadFile'>",
            "required": false,
            "default": "annotation=UploadFile required=True alias='file' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/upload",
        "methods": [
          "POST"
        ],
        "name": "upload_case",
        "summary": "Upload a case document and create a case record with AI analysis",
        "description": "",
        "parameters": [
          {
            "name": "file",
            "type": "<class 'fastapi.datastructures.UploadFile'>",
            "required": false,
            "default": "annotation=UploadFile required=True alias='file' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/subscriptions",
        "methods": [
          "GET"
        ],
        "name": "get_subscriptions",
        "summary": "Get paginated list of subscriptions with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/subscriptions",
        "methods": [
          "GET"
        ],
        "name": "get_subscriptions",
        "summary": "Get paginated list of subscriptions with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}/process-metadata",
        "methods": [
          "POST"
        ],
        "name": "process_case_metadata",
        "summary": "Process metadata for a specific case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}/process-metadata",
        "methods": [
          "POST"
        ],
        "name": "process_case_metadata",
        "summary": "Process metadata for a specific case",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/process-all-metadata",
        "methods": [
          "POST"
        ],
        "name": "process_all_cases_metadata",
        "summary": "Process metadata for all cases",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/process-all-metadata",
        "methods": [
          "POST"
        ],
        "name": "process_all_cases_metadata",
        "summary": "Process metadata for all cases",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}/process-enhanced",
        "methods": [
          "POST"
        ],
        "name": "process_case_enhanced",
        "summary": "Process case with analytics and entity extraction",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/cases/{case_id}/process-enhanced",
        "methods": [
          "POST"
        ],
        "name": "process_case_enhanced",
        "summary": "Process case with analytics and entity extraction",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/google-maps-api-key",
        "methods": [
          "GET"
        ],
        "name": "get_google_maps_api_key",
        "summary": "Get Google Maps API key for frontend use",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/google-maps-api-key",
        "methods": [
          "GET"
        ],
        "name": "get_google_maps_api_key",
        "summary": "Get Google Maps API key for frontend use",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/access",
        "methods": [
          "GET"
        ],
        "name": "get_access_logs",
        "summary": "Get access logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/access",
        "methods": [
          "GET"
        ],
        "name": "get_access_logs",
        "summary": "Get access logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/activity",
        "methods": [
          "GET"
        ],
        "name": "get_activity_logs",
        "summary": "Get activity logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "activity_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='activity_type' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/activity",
        "methods": [
          "GET"
        ],
        "name": "get_activity_logs",
        "summary": "Get activity logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "activity_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='activity_type' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/audit",
        "methods": [
          "GET"
        ],
        "name": "get_audit_logs",
        "summary": "Get audit logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "table_name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='table_name' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/audit",
        "methods": [
          "GET"
        ],
        "name": "get_audit_logs",
        "summary": "Get audit logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "table_name",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='table_name' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/errors",
        "methods": [
          "GET"
        ],
        "name": "get_error_logs",
        "summary": "Get error logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "severity",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='severity' json_schema_extra={}"
          },
          {
            "name": "resolved",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='resolved' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/errors",
        "methods": [
          "GET"
        ],
        "name": "get_error_logs",
        "summary": "Get error logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "severity",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='severity' json_schema_extra={}"
          },
          {
            "name": "resolved",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='resolved' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/security",
        "methods": [
          "GET"
        ],
        "name": "get_security_logs",
        "summary": "Get security logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "event_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='event_type' json_schema_extra={}"
          },
          {
            "name": "severity",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='severity' json_schema_extra={}"
          },
          {
            "name": "blocked",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='blocked' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/security",
        "methods": [
          "GET"
        ],
        "name": "get_security_logs",
        "summary": "Get security logs with filtering",
        "description": "",
        "parameters": [
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "event_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='event_type' json_schema_extra={}"
          },
          {
            "name": "severity",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='severity' json_schema_extra={}"
          },
          {
            "name": "blocked",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='blocked' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=100 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=1000)]"
          },
          {
            "name": "offset",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=0 alias='offset' json_schema_extra={} metadata=[Ge(ge=0)]"
          },
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/stats",
        "methods": [
          "GET"
        ],
        "name": "get_log_stats",
        "summary": "Get logging statistics",
        "description": "",
        "parameters": [
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/logs/stats",
        "methods": [
          "GET"
        ],
        "name": "get_log_stats",
        "summary": "Get logging statistics",
        "description": "",
        "parameters": [
          {
            "name": "start_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='start_date' json_schema_extra={}"
          },
          {
            "name": "end_date",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='end_date' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/stats",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get people statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/stats",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get people statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/stats",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get banks statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/stats",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get banks statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/stats",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get insurance statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/stats",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get insurance statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/stats",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get companies statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/stats",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get companies statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get payments statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get payments statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/stats",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get comprehensive people statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/stats",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get comprehensive people statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "GET"
        ],
        "name": "get_people",
        "summary": "Get paginated list of people with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "risk_level",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='risk_level' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "GET"
        ],
        "name": "get_people",
        "summary": "Get paginated list of people with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "risk_level",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='risk_level' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person",
        "summary": "Get detailed information about a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person",
        "summary": "Get detailed information about a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "POST"
        ],
        "name": "create_person",
        "summary": "Create a new person record",
        "description": "",
        "parameters": [
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "POST"
        ],
        "name": "create_person",
        "summary": "Create a new person record",
        "description": "",
        "parameters": [
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person",
        "summary": "Update an existing person record",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person",
        "summary": "Update an existing person record",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person",
        "summary": "Delete a person and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person",
        "summary": "Delete a person and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/stats",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get comprehensive bank statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/stats",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get comprehensive bank statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "GET"
        ],
        "name": "get_banks",
        "summary": "Get paginated list of banks with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "bank_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='bank_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "GET"
        ],
        "name": "get_banks",
        "summary": "Get paginated list of banks with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "bank_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='bank_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "GET"
        ],
        "name": "get_bank",
        "summary": "Get detailed information about a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "GET"
        ],
        "name": "get_bank",
        "summary": "Get detailed information about a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "POST"
        ],
        "name": "create_bank",
        "summary": "Create a new bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "POST"
        ],
        "name": "create_bank",
        "summary": "Create a new bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_bank",
        "summary": "Update an existing bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_bank",
        "summary": "Update an existing bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_bank",
        "summary": "Delete a bank and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_bank",
        "summary": "Delete a bank and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/stats",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get comprehensive insurance statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/stats",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get comprehensive insurance statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "GET"
        ],
        "name": "get_insurance",
        "summary": "Get paginated list of insurance companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "insurance_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='insurance_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "GET"
        ],
        "name": "get_insurance",
        "summary": "Get paginated list of insurance companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "insurance_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='insurance_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_company",
        "summary": "Get detailed information about a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_company",
        "summary": "Get detailed information about a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "POST"
        ],
        "name": "create_insurance",
        "summary": "Create a new insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "POST"
        ],
        "name": "create_insurance",
        "summary": "Create a new insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_insurance",
        "summary": "Update an existing insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_insurance",
        "summary": "Update an existing insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_insurance",
        "summary": "Delete an insurance company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_insurance",
        "summary": "Delete an insurance company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/stats",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get comprehensive company statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/stats",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get comprehensive company statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "GET"
        ],
        "name": "get_companies",
        "summary": "Get paginated list of companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "company_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='company_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "GET"
        ],
        "name": "get_companies",
        "summary": "Get paginated list of companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "company_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='company_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "GET"
        ],
        "name": "get_company",
        "summary": "Get detailed information about a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "GET"
        ],
        "name": "get_company",
        "summary": "Get detailed information about a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "POST"
        ],
        "name": "create_company",
        "summary": "Create a new company",
        "description": "",
        "parameters": [
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "POST"
        ],
        "name": "create_company",
        "summary": "Create a new company",
        "description": "",
        "parameters": [
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_company",
        "summary": "Update an existing company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_company",
        "summary": "Update an existing company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_company",
        "summary": "Delete a company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_company",
        "summary": "Delete a company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get comprehensive payment statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get comprehensive payment statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "GET"
        ],
        "name": "get_payment",
        "summary": "Get detailed information about a specific payment",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "GET"
        ],
        "name": "get_payment",
        "summary": "Get detailed information about a specific payment",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_payment",
        "summary": "Delete a payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_payment",
        "summary": "Delete a payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "POST"
        ],
        "name": "create_payment",
        "summary": "Create a new payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "POST"
        ],
        "name": "create_payment",
        "summary": "Create a new payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_payment",
        "summary": "Update an existing payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_payment",
        "summary": "Update an existing payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/stats",
        "methods": [
          "GET"
        ],
        "name": "get_settings_stats",
        "summary": "Get comprehensive settings statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/stats",
        "methods": [
          "GET"
        ],
        "name": "get_settings_stats",
        "summary": "Get comprehensive settings statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "GET"
        ],
        "name": "get_settings",
        "summary": "Get paginated list of settings with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_public",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_public' json_schema_extra={}"
          },
          {
            "name": "is_editable",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_editable' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "GET"
        ],
        "name": "get_settings",
        "summary": "Get paginated list of settings with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_public",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_public' json_schema_extra={}"
          },
          {
            "name": "is_editable",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_editable' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "GET"
        ],
        "name": "get_setting",
        "summary": "Get detailed information about a specific setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "GET"
        ],
        "name": "get_setting",
        "summary": "Get detailed information about a specific setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "GET"
        ],
        "name": "get_setting_by_key",
        "summary": "Get setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "GET"
        ],
        "name": "get_setting_by_key",
        "summary": "Get setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "POST"
        ],
        "name": "create_setting",
        "summary": "Create a new setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "POST"
        ],
        "name": "create_setting",
        "summary": "Create a new setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting",
        "summary": "Update an existing setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting",
        "summary": "Update an existing setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting_by_key",
        "summary": "Update setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting_by_key",
        "summary": "Update setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_setting",
        "summary": "Delete a setting record",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_setting",
        "summary": "Delete a setting record",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/category/{category}",
        "methods": [
          "GET"
        ],
        "name": "get_settings_by_category",
        "summary": "Get all settings in a specific category",
        "description": "",
        "parameters": [
          {
            "name": "category",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/category/{category}",
        "methods": [
          "GET"
        ],
        "name": "get_settings_by_category",
        "summary": "Get all settings in a specific category",
        "description": "",
        "parameters": [
          {
            "name": "category",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "GET"
        ],
        "name": "get_permissions",
        "summary": "Get paginated list of permissions with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "GET"
        ],
        "name": "get_permissions",
        "summary": "Get paginated list of permissions with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "POST"
        ],
        "name": "create_permission",
        "summary": "Create a new permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "POST"
        ],
        "name": "create_permission",
        "summary": "Create a new permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "GET"
        ],
        "name": "get_permission",
        "summary": "Get a specific permission by ID",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "GET"
        ],
        "name": "get_permission",
        "summary": "Get a specific permission by ID",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_permission",
        "summary": "Update a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_permission",
        "summary": "Update a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_permission",
        "summary": "Delete a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_permission",
        "summary": "Delete a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "GET"
        ],
        "name": "get_roles",
        "summary": "Get paginated list of roles with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "GET"
        ],
        "name": "get_roles",
        "summary": "Get paginated list of roles with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "POST"
        ],
        "name": "create_role",
        "summary": "Create a new role",
        "description": "",
        "parameters": [
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "POST"
        ],
        "name": "create_role",
        "summary": "Create a new role",
        "description": "",
        "parameters": [
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "GET"
        ],
        "name": "get_role",
        "summary": "Get a specific role by ID with permissions",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "GET"
        ],
        "name": "get_role",
        "summary": "Get a specific role by ID with permissions",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_role",
        "summary": "Update a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_role",
        "summary": "Update a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_role",
        "summary": "Delete a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_role",
        "summary": "Delete a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "GET"
        ],
        "name": "get_user_roles",
        "summary": "Get paginated list of user role assignments with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "role_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='role_id' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "GET"
        ],
        "name": "get_user_roles",
        "summary": "Get paginated list of user role assignments with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "role_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='role_id' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "POST"
        ],
        "name": "assign_role",
        "summary": "Assign a role to a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "POST"
        ],
        "name": "assign_role",
        "summary": "Assign a role to a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user_role",
        "summary": "Update a user role assignment",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user_role",
        "summary": "Update a user role assignment",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "remove_user_role",
        "summary": "Remove a role from a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "remove_user_role",
        "summary": "Remove a role from a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/stats",
        "methods": [
          "GET"
        ],
        "name": "get_roles_permissions_stats",
        "summary": "Get roles and permissions statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/stats",
        "methods": [
          "GET"
        ],
        "name": "get_roles_permissions_stats",
        "summary": "Get roles and permissions statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-people": [
      {
        "path": "/api/admin/people/stats",
        "methods": [
          "GET"
        ],
        "name": "get_people_stats",
        "summary": "Get comprehensive people statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "GET"
        ],
        "name": "get_people",
        "summary": "Get paginated list of people with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "risk_level",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='risk_level' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "GET"
        ],
        "name": "get_person",
        "summary": "Get detailed information about a specific person",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/",
        "methods": [
          "POST"
        ],
        "name": "create_person",
        "summary": "Create a new person record",
        "description": "",
        "parameters": [
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_person",
        "summary": "Update an existing person record",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "person_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/people/{person_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_person",
        "summary": "Delete a person and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "person_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-banks": [
      {
        "path": "/api/admin/banks/stats",
        "methods": [
          "GET"
        ],
        "name": "get_banks_stats",
        "summary": "Get comprehensive bank statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "GET"
        ],
        "name": "get_banks",
        "summary": "Get paginated list of banks with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "bank_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='bank_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "GET"
        ],
        "name": "get_bank",
        "summary": "Get detailed information about a specific bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/",
        "methods": [
          "POST"
        ],
        "name": "create_bank",
        "summary": "Create a new bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_bank",
        "summary": "Update an existing bank",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "bank_data",
            "type": "<class 'schemas.admin.BankUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/banks/{bank_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_bank",
        "summary": "Delete a bank and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "bank_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-insurance": [
      {
        "path": "/api/admin/insurance/stats",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_stats",
        "summary": "Get comprehensive insurance statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "GET"
        ],
        "name": "get_insurance",
        "summary": "Get paginated list of insurance companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "insurance_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='insurance_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "GET"
        ],
        "name": "get_insurance_company",
        "summary": "Get detailed information about a specific insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/",
        "methods": [
          "POST"
        ],
        "name": "create_insurance",
        "summary": "Create a new insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_insurance",
        "summary": "Update an existing insurance company",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "insurance_data",
            "type": "<class 'schemas.admin.InsuranceUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/insurance/{insurance_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_insurance",
        "summary": "Delete an insurance company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "insurance_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-companies": [
      {
        "path": "/api/admin/companies/stats",
        "methods": [
          "GET"
        ],
        "name": "get_companies_stats",
        "summary": "Get comprehensive company statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "GET"
        ],
        "name": "get_companies",
        "summary": "Get paginated list of companies with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "company_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='company_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "GET"
        ],
        "name": "get_company",
        "summary": "Get detailed information about a specific company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/",
        "methods": [
          "POST"
        ],
        "name": "create_company",
        "summary": "Create a new company",
        "description": "",
        "parameters": [
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_company",
        "summary": "Update an existing company",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "company_data",
            "type": "<class 'schemas.admin.CompanyUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/companies/{company_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_company",
        "summary": "Delete a company and all associated data",
        "description": "",
        "parameters": [
          {
            "name": "company_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-payments": [
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get comprehensive payment statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "GET"
        ],
        "name": "get_payment",
        "summary": "Get detailed information about a specific payment",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_payment",
        "summary": "Delete a payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "POST"
        ],
        "name": "create_payment",
        "summary": "Create a new payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_payment",
        "summary": "Update an existing payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-settings": [
      {
        "path": "/api/admin/settings/stats",
        "methods": [
          "GET"
        ],
        "name": "get_settings_stats",
        "summary": "Get comprehensive settings statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "GET"
        ],
        "name": "get_settings",
        "summary": "Get paginated list of settings with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_public",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_public' json_schema_extra={}"
          },
          {
            "name": "is_editable",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_editable' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "GET"
        ],
        "name": "get_setting",
        "summary": "Get detailed information about a specific setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "GET"
        ],
        "name": "get_setting_by_key",
        "summary": "Get setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings",
        "methods": [
          "POST"
        ],
        "name": "create_setting",
        "summary": "Create a new setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting",
        "summary": "Update an existing setting",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/key/{key}",
        "methods": [
          "PUT"
        ],
        "name": "update_setting_by_key",
        "summary": "Update setting by key",
        "description": "",
        "parameters": [
          {
            "name": "key",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.admin.SettingsUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/{setting_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_setting",
        "summary": "Delete a setting record",
        "description": "",
        "parameters": [
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/settings/category/{category}",
        "methods": [
          "GET"
        ],
        "name": "get_settings_by_category",
        "summary": "Get all settings in a specific category",
        "description": "",
        "parameters": [
          {
            "name": "category",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin-roles": [
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "GET"
        ],
        "name": "get_permissions",
        "summary": "Get paginated list of permissions with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "category",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='category' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions",
        "methods": [
          "POST"
        ],
        "name": "create_permission",
        "summary": "Create a new permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "GET"
        ],
        "name": "get_permission",
        "summary": "Get a specific permission by ID",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_permission",
        "summary": "Update a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "permission_data",
            "type": "<class 'schemas.role.PermissionUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/permissions/{permission_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_permission",
        "summary": "Delete a permission",
        "description": "",
        "parameters": [
          {
            "name": "permission_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "GET"
        ],
        "name": "get_roles",
        "summary": "Get paginated list of roles with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles",
        "methods": [
          "POST"
        ],
        "name": "create_role",
        "summary": "Create a new role",
        "description": "",
        "parameters": [
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "GET"
        ],
        "name": "get_role",
        "summary": "Get a specific role by ID with permissions",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_role",
        "summary": "Update a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "role_data",
            "type": "<class 'schemas.role.RoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/roles/{role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_role",
        "summary": "Delete a role",
        "description": "",
        "parameters": [
          {
            "name": "role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "GET"
        ],
        "name": "get_user_roles",
        "summary": "Get paginated list of user role assignments with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' json_schema_extra={}"
          },
          {
            "name": "role_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='role_id' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles",
        "methods": [
          "POST"
        ],
        "name": "assign_role",
        "summary": "Assign a role to a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_user_role",
        "summary": "Update a user role assignment",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "user_role_data",
            "type": "<class 'schemas.role.UserRoleUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/user-roles/{user_role_id}",
        "methods": [
          "DELETE"
        ],
        "name": "remove_user_role",
        "summary": "Remove a role from a user",
        "description": "",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/roles/stats",
        "methods": [
          "GET"
        ],
        "name": "get_roles_permissions_stats",
        "summary": "Get roles and permissions statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin_payments": [
      {
        "path": "/api/admin/payments/stats",
        "methods": [
          "GET"
        ],
        "name": "get_payments_stats",
        "summary": "Get comprehensive payment statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "GET"
        ],
        "name": "get_payments",
        "summary": "Get paginated list of payments with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "GET"
        ],
        "name": "get_payment",
        "summary": "Get detailed information about a specific payment",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_payment",
        "summary": "Delete a payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/",
        "methods": [
          "POST"
        ],
        "name": "create_payment",
        "summary": "Create a new payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/payments/{payment_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_payment",
        "summary": "Update an existing payment record",
        "description": "",
        "parameters": [
          {
            "name": "payment_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "payment_data",
            "type": "<class 'schemas.admin.PaymentUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "admin_case_hearings": [
      {
        "path": "/api/admin/case-hearings/test",
        "methods": [
          "GET"
        ],
        "name": "test_endpoint",
        "summary": "Test endpoint without authentication",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/search/cases",
        "methods": [
          "GET"
        ],
        "name": "search_cases_for_hearing",
        "summary": "Search cases by suit reference number or title for hearing creation",
        "description": "",
        "parameters": [
          {
            "name": "q",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='q' json_schema_extra={} metadata=[MinLen(min_length=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1000 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=10000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/courts",
        "methods": [
          "GET"
        ],
        "name": "get_courts_for_hearing",
        "summary": "Get courts for hearing creation/editing",
        "description": "",
        "parameters": [
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/judges",
        "methods": [
          "GET"
        ],
        "name": "get_judges_for_hearing",
        "summary": "Get judges for hearing creation/editing",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings",
        "methods": [
          "GET"
        ],
        "name": "get_all_case_hearings",
        "summary": "Get all case hearings with filtering and pagination for admin",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=50 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' json_schema_extra={}"
          },
          {
            "name": "remark",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='remark' json_schema_extra={}"
          },
          {
            "name": "group_by_case",
            "type": "<class 'bool'>",
            "required": false,
            "default": "annotation=bool required=False default=False alias='group_by_case' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/{hearing_id}",
        "methods": [
          "GET"
        ],
        "name": "get_case_hearing_by_id",
        "summary": "Get a specific case hearing by ID",
        "description": "",
        "parameters": [
          {
            "name": "hearing_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings",
        "methods": [
          "POST"
        ],
        "name": "create_case_hearing",
        "summary": "Create a new case hearing record",
        "description": "",
        "parameters": [
          {
            "name": "hearing_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/{hearing_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_case_hearing",
        "summary": "Update a case hearing record",
        "description": "",
        "parameters": [
          {
            "name": "hearing_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "hearing_data",
            "type": "<class 'dict'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/{hearing_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_case_hearing",
        "summary": "Delete a case hearing record",
        "description": "",
        "parameters": [
          {
            "name": "hearing_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/search/cases",
        "methods": [
          "GET"
        ],
        "name": "search_cases_for_hearing",
        "summary": "Search cases by suit reference number or title for hearing creation",
        "description": "",
        "parameters": [
          {
            "name": "q",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='q' json_schema_extra={} metadata=[MinLen(min_length=0)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1000 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=10000)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/all-cases",
        "methods": [
          "GET"
        ],
        "name": "get_all_cases",
        "summary": "Get ALL cases from the database for hearing creation",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/courts",
        "methods": [
          "GET"
        ],
        "name": "get_courts_for_hearing",
        "summary": "Get courts for hearing creation/editing",
        "description": "",
        "parameters": [
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/judges",
        "methods": [
          "GET"
        ],
        "name": "get_judges_for_hearing",
        "summary": "Get judges for hearing creation/editing",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/case-hearings/stats",
        "methods": [
          "GET"
        ],
        "name": "get_hearing_statistics",
        "summary": "Get hearing statistics for admin dashboard",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "judges": [
      {
        "path": "/api/admin/judges",
        "methods": [
          "GET"
        ],
        "name": "get_judges",
        "summary": "Get list of judges with filtering and pagination",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' description='Search term for name, title, or court type' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[models.judges.JudgeStatus]",
            "required": false,
            "default": "annotation=Union[JudgeStatus, NoneType] required=False default=None alias='status' description='Filter by status' json_schema_extra={}"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/judges/{judge_id}",
        "methods": [
          "GET"
        ],
        "name": "get_judge",
        "summary": "Get a specific judge by ID",
        "description": "",
        "parameters": [
          {
            "name": "judge_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/judges",
        "methods": [
          "POST"
        ],
        "name": "create_judge",
        "summary": "Create a new judge",
        "description": "",
        "parameters": [
          {
            "name": "judge_data",
            "type": "<class 'schemas.judges.JudgeCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/judges/{judge_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_judge",
        "summary": "Update a judge",
        "description": "",
        "parameters": [
          {
            "name": "judge_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "judge_data",
            "type": "<class 'schemas.judges.JudgeUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/judges/{judge_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_judge",
        "summary": "Delete a judge (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "judge_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/judges/search/active",
        "methods": [
          "GET"
        ],
        "name": "search_active_judges",
        "summary": "Search active judges for dropdowns",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='query' description='Search query' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=50 alias='limit' description='Maximum results' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "court_types": [
      {
        "path": "/api/admin/court-types",
        "methods": [
          "GET"
        ],
        "name": "get_court_types",
        "summary": "Get list of court types with filtering and pagination",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' description='Search term for name or code' json_schema_extra={}"
          },
          {
            "name": "level",
            "type": "typing.Optional[models.court_types.CourtLevel]",
            "required": false,
            "default": "annotation=Union[CourtLevel, NoneType] required=False default=None alias='level' description='Filter by court level' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/court-types/{court_type_id}",
        "methods": [
          "GET"
        ],
        "name": "get_court_type",
        "summary": "Get a specific court type by ID",
        "description": "",
        "parameters": [
          {
            "name": "court_type_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/court-types",
        "methods": [
          "POST"
        ],
        "name": "create_court_type",
        "summary": "Create a new court type",
        "description": "",
        "parameters": [
          {
            "name": "court_type_data",
            "type": "<class 'schemas.court_types.CourtTypeCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/court-types/{court_type_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_court_type",
        "summary": "Update a court type",
        "description": "",
        "parameters": [
          {
            "name": "court_type_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "court_type_data",
            "type": "<class 'schemas.court_types.CourtTypeUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/court-types/{court_type_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_court_type",
        "summary": "Delete a court type (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "court_type_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/admin/court-types/search/active",
        "methods": [
          "GET"
        ],
        "name": "search_active_court_types",
        "summary": "Search active court types for dropdowns",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='query' description='Search query' json_schema_extra={}"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=50 alias='limit' description='Maximum results' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "tenant": [
      {
        "path": "/api/tenant/tenants/stats",
        "methods": [
          "GET"
        ],
        "name": "get_tenant_stats",
        "summary": "Get tenant statistics",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants",
        "methods": [
          "GET"
        ],
        "name": "get_tenants",
        "summary": "Get paginated list of tenants with filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          },
          {
            "name": "is_approved",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_approved' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "GET"
        ],
        "name": "get_tenant",
        "summary": "Get tenant by ID",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants",
        "methods": [
          "POST"
        ],
        "name": "create_tenant",
        "summary": "Create a new tenant",
        "description": "",
        "parameters": [
          {
            "name": "tenant_data",
            "type": "<class 'schemas.tenant.TenantCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_tenant",
        "summary": "Update tenant",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "tenant_data",
            "type": "<class 'schemas.tenant.TenantUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_tenant",
        "summary": "Delete tenant (soft delete by setting is_active to False)",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/plans",
        "methods": [
          "GET"
        ],
        "name": "get_subscription_plans",
        "summary": "Get paginated list of subscription plans",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/plans/{plan_id}",
        "methods": [
          "GET"
        ],
        "name": "get_subscription_plan",
        "summary": "Get subscription plan by ID",
        "description": "",
        "parameters": [
          {
            "name": "plan_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/subscription-requests",
        "methods": [
          "GET"
        ],
        "name": "get_subscription_requests",
        "summary": "Get paginated list of subscription requests",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "status",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='status' json_schema_extra={}"
          },
          {
            "name": "tenant_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='tenant_id' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/subscription-requests",
        "methods": [
          "POST"
        ],
        "name": "create_subscription_request",
        "summary": "Create a new subscription request",
        "description": "",
        "parameters": [
          {
            "name": "request_data",
            "type": "<class 'schemas.tenant.SubscriptionRequestCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/subscription-requests/{request_id}/approve",
        "methods": [
          "PUT"
        ],
        "name": "approve_subscription_request",
        "summary": "Approve a subscription request",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "admin_notes",
            "type": "typing.Optional[str]",
            "required": false,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/subscription-requests/{request_id}/reject",
        "methods": [
          "PUT"
        ],
        "name": "reject_subscription_request",
        "summary": "Reject a subscription request",
        "description": "",
        "parameters": [
          {
            "name": "request_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "admin_notes",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}/settings",
        "methods": [
          "GET"
        ],
        "name": "get_tenant_settings",
        "summary": "Get tenant settings",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}/settings",
        "methods": [
          "POST"
        ],
        "name": "create_tenant_setting",
        "summary": "Create tenant setting",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.tenant.TenantSettingCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}/settings/{setting_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_tenant_setting",
        "summary": "Update tenant setting",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "setting_data",
            "type": "<class 'schemas.tenant.TenantSettingUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants",
        "methods": [
          "GET"
        ],
        "name": "get_tenants",
        "summary": "Get all tenants with filtering and pagination",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=10 alias='limit' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "search",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='search' json_schema_extra={}"
          },
          {
            "name": "status",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='status' json_schema_extra={}"
          },
          {
            "name": "plan",
            "type": "<class 'str'>",
            "required": false,
            "default": "annotation=str required=False default='' alias='plan' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "GET"
        ],
        "name": "get_tenant",
        "summary": "Get a specific tenant by ID",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants",
        "methods": [
          "POST"
        ],
        "name": "create_tenant",
        "summary": "Create a new tenant",
        "description": "",
        "parameters": [
          {
            "name": "tenant_data",
            "type": "<class 'schemas.tenant.TenantCreateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_tenant",
        "summary": "Update a tenant",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "tenant_data",
            "type": "<class 'schemas.tenant.TenantUpdateRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/tenant/tenants/{tenant_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_tenant",
        "summary": "Delete a tenant",
        "description": "",
        "parameters": [
          {
            "name": "tenant_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "courts": [
      {
        "path": "/api/courts/",
        "methods": [
          "GET"
        ],
        "name": "get_courts",
        "summary": "Get all courts with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of results per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[schemas.court.CourtType]",
            "required": false,
            "default": "annotation=Union[CourtType, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='Filter by city' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' description='Filter by active status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/search",
        "methods": [
          "GET"
        ],
        "name": "search_courts",
        "summary": "Search courts with various filters",
        "description": "",
        "parameters": [
          {
            "name": "query",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='query' description='Search query' json_schema_extra={}"
          },
          {
            "name": "court_type",
            "type": "typing.Optional[schemas.court.CourtType]",
            "required": false,
            "default": "annotation=Union[CourtType, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='Filter by city' json_schema_extra={}"
          },
          {
            "name": "district",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='district' description='Filter by district' json_schema_extra={}"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=None alias='is_active' description='Filter by active status' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Number of results per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/regions",
        "methods": [
          "GET"
        ],
        "name": "get_regions",
        "summary": "Get all unique regions",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/cities",
        "methods": [
          "GET"
        ],
        "name": "get_cities",
        "summary": "Get all unique cities, optionally filtered by region",
        "description": "",
        "parameters": [
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter cities by region' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/types",
        "methods": [
          "GET"
        ],
        "name": "get_court_types",
        "summary": "Get all unique court types",
        "description": "",
        "parameters": [],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/map",
        "methods": [
          "GET"
        ],
        "name": "get_courts_for_map",
        "summary": "Get courts for map display with optional proximity search",
        "description": "",
        "parameters": [
          {
            "name": "court_type",
            "type": "typing.Optional[schemas.court.CourtType]",
            "required": false,
            "default": "annotation=Union[CourtType, NoneType] required=False default=None alias='court_type' description='Filter by court type' json_schema_extra={}"
          },
          {
            "name": "region",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='region' description='Filter by region' json_schema_extra={}"
          },
          {
            "name": "city",
            "type": "typing.Optional[str]",
            "required": false,
            "default": "annotation=Union[str, NoneType] required=False default=None alias='city' description='Filter by city' json_schema_extra={}"
          },
          {
            "name": "latitude",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='latitude' description='Latitude for proximity search' json_schema_extra={} metadata=[Ge(ge=-90), Le(le=90)]"
          },
          {
            "name": "longitude",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='longitude' description='Longitude for proximity search' json_schema_extra={} metadata=[Ge(ge=-180), Le(le=180)]"
          },
          {
            "name": "radius_km",
            "type": "typing.Optional[float]",
            "required": false,
            "default": "annotation=Union[float, NoneType] required=False default=None alias='radius_km' description='Search radius in kilometers' json_schema_extra={} metadata=[Gt(gt=0), Le(le=1000)]"
          },
          {
            "name": "is_active",
            "type": "typing.Optional[bool]",
            "required": false,
            "default": "annotation=Union[bool, NoneType] required=False default=True alias='is_active' description='Filter by active status' json_schema_extra={}"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/{court_id}",
        "methods": [
          "GET"
        ],
        "name": "get_court",
        "summary": "Get a specific court by ID",
        "description": "",
        "parameters": [
          {
            "name": "court_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/",
        "methods": [
          "POST"
        ],
        "name": "create_court",
        "summary": "Create a new court",
        "description": "",
        "parameters": [
          {
            "name": "court",
            "type": "<class 'schemas.court.CourtCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/{court_id}",
        "methods": [
          "PUT"
        ],
        "name": "update_court",
        "summary": "Update a court",
        "description": "",
        "parameters": [
          {
            "name": "court_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "court",
            "type": "<class 'schemas.court.CourtUpdate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/courts/{court_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_court",
        "summary": "Delete a court",
        "description": "",
        "parameters": [
          {
            "name": "court_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ],
    "ai-chat": [
      {
        "path": "/api/ai-chat/sessions",
        "methods": [
          "POST"
        ],
        "name": "create_chat_session",
        "summary": "Create a new AI chat session for a case",
        "description": "",
        "parameters": [
          {
            "name": "session_data",
            "type": "<class 'schemas.ai_chat.ChatSessionCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions",
        "methods": [
          "POST"
        ],
        "name": "create_chat_session",
        "summary": "Create a new AI chat session for a case",
        "description": "",
        "parameters": [
          {
            "name": "session_data",
            "type": "<class 'schemas.ai_chat.ChatSessionCreate'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions",
        "methods": [
          "GET"
        ],
        "name": "get_chat_sessions",
        "summary": "Get chat sessions with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='case_id' description='Filter by case ID' json_schema_extra={}"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' description='Filter by user ID' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions",
        "methods": [
          "GET"
        ],
        "name": "get_chat_sessions",
        "summary": "Get chat sessions with optional filtering",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='case_id' description='Filter by case ID' json_schema_extra={}"
          },
          {
            "name": "user_id",
            "type": "typing.Optional[int]",
            "required": false,
            "default": "annotation=Union[int, NoneType] required=False default=None alias='user_id' description='Filter by user ID' json_schema_extra={}"
          },
          {
            "name": "page",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=1 alias='page' description='Page number' json_schema_extra={} metadata=[Ge(ge=1)]"
          },
          {
            "name": "limit",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=20 alias='limit' description='Items per page' json_schema_extra={} metadata=[Ge(ge=1), Le(le=100)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}",
        "methods": [
          "GET"
        ],
        "name": "get_chat_session",
        "summary": "Get a specific chat session by ID",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}",
        "methods": [
          "GET"
        ],
        "name": "get_chat_session",
        "summary": "Get a specific chat session by ID",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}/messages",
        "methods": [
          "POST"
        ],
        "name": "send_message",
        "summary": "Send a message to an AI chat session",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "message_data",
            "type": "<class 'schemas.ai_chat.ChatMessageRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}/messages",
        "methods": [
          "POST"
        ],
        "name": "send_message",
        "summary": "Send a message to an AI chat session",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          },
          {
            "name": "message_data",
            "type": "<class 'schemas.ai_chat.ChatMessageRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{case_id}/start",
        "methods": [
          "POST"
        ],
        "name": "start_new_chat",
        "summary": "Start a new chat session and send the first message",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "message_data",
            "type": "<class 'schemas.ai_chat.ChatMessageRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{case_id}/start",
        "methods": [
          "POST"
        ],
        "name": "start_new_chat",
        "summary": "Start a new chat session and send the first message",
        "description": "",
        "parameters": [
          {
            "name": "case_id",
            "type": "<class 'int'>",
            "required": true,
            "default": null
          },
          {
            "name": "message_data",
            "type": "<class 'schemas.ai_chat.ChatMessageRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/case-summary",
        "methods": [
          "POST"
        ],
        "name": "generate_case_summary",
        "summary": "Generate a comprehensive AI summary of a case",
        "description": "",
        "parameters": [
          {
            "name": "summary_data",
            "type": "<class 'schemas.ai_chat.CaseSummaryRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/case-summary",
        "methods": [
          "POST"
        ],
        "name": "generate_case_summary",
        "summary": "Generate a comprehensive AI summary of a case",
        "description": "",
        "parameters": [
          {
            "name": "summary_data",
            "type": "<class 'schemas.ai_chat.CaseSummaryRequest'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_chat_session",
        "summary": "Delete a chat session (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/sessions/{session_id}",
        "methods": [
          "DELETE"
        ],
        "name": "delete_chat_session",
        "summary": "Delete a chat session (soft delete)",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/usage",
        "methods": [
          "GET"
        ],
        "name": "get_usage_analytics",
        "summary": "Get AI chat usage analytics for reporting",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=30 alias='days' description='Number of days to analyze' json_schema_extra={} metadata=[Ge(ge=1), Le(le=365)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/usage",
        "methods": [
          "GET"
        ],
        "name": "get_usage_analytics",
        "summary": "Get AI chat usage analytics for reporting",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=30 alias='days' description='Number of days to analyze' json_schema_extra={} metadata=[Ge(ge=1), Le(le=365)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/session/{session_id}",
        "methods": [
          "GET"
        ],
        "name": "get_session_analytics",
        "summary": "Get detailed analytics for a specific chat session",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/session/{session_id}",
        "methods": [
          "GET"
        ],
        "name": "get_session_analytics",
        "summary": "Get detailed analytics for a specific chat session",
        "description": "",
        "parameters": [
          {
            "name": "session_id",
            "type": "<class 'str'>",
            "required": true,
            "default": null
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/users",
        "methods": [
          "GET"
        ],
        "name": "get_user_analytics",
        "summary": "Get user-specific AI chat analytics and token usage for billing",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=30 alias='days' description='Number of days to analyze' json_schema_extra={} metadata=[Ge(ge=1), Le(le=365)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      },
      {
        "path": "/api/ai-chat/analytics/users",
        "methods": [
          "GET"
        ],
        "name": "get_user_analytics",
        "summary": "Get user-specific AI chat analytics and token usage for billing",
        "description": "",
        "parameters": [
          {
            "name": "days",
            "type": "<class 'int'>",
            "required": false,
            "default": "annotation=int required=False default=30 alias='days' description='Number of days to analyze' json_schema_extra={} metadata=[Ge(ge=1), Le(le=365)]"
          }
        ],
        "request_body": null,
        "responses": {},
        "tags": []
      }
    ]
  }
}